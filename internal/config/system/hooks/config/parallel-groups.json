{
  "parallelization_config": {
    "version": "1.0",
    "description": "Configuration for parallel hook execution groups",
    "max_concurrent_groups": 3,
    "timeout_seconds": 30
  },
  "hook_groups": {
    "independent_validators": {
      "description": "Hooks that can run completely independently",
      "parallel": true,
      "hooks": [
        "security-validator",
        "style-consistency.py", 
        "timestamp-validator.py",
        "duplicate-detector-go"
      ],
      "max_concurrent": 4,
      "priority": 1
    },
    "git_related": {
      "description": "Git and repository validation hooks (optimized Go implementation)",
      "parallel": true,
      "hooks": [
        "git-validator-optimized"
      ],
      "max_concurrent": 1,
      "priority": 2
    },
    "code_analysis": {
      "description": "Code analysis and enforcement hooks",
      "parallel": true,
      "hooks": [
        "no-mock-code.py",
        "mcp-tool-enforcer",
        "env-sync-validator"
      ],
      "max_concurrent": 3,
      "priority": 3
    },
    "api_security": {
      "description": "API and security validation hooks",
      "parallel": true,
      "hooks": [
        "api-endpoint-verifier.py",
        "pre-commit-validator.py"
      ],
      "max_concurrent": 2,
      "priority": 4
    },
    "logging_async": {
      "description": "Logging and monitoring hooks (can be background)",
      "parallel": true,
      "background_eligible": true,
      "hooks": [
        "log-commands.py",
        "enhanced-error-logger.py",
        "tool-reliability-analyzer.py"
      ],
      "max_concurrent": 3,
      "priority": 5
    },
    "documentation": {
      "description": "Documentation and development operations",
      "parallel": true,
      "hooks": [
        "documentation-standards.sh",
        "development-operations.sh"
      ],
      "max_concurrent": 2,
      "priority": 6
    },
    "sequential_required": {
      "description": "Hooks that must run sequentially (dependencies)",
      "parallel": false,
      "hooks": [
        "hook-integration-wrapper.sh",
        "protocol-before-fixed.sh"
      ],
      "priority": 7
    },
    "post_tool_processing": {
      "description": "Post-tool execution processing and monitoring",
      "parallel": true,
      "background_eligible": true,
      "hooks": [
        "enhanced-error-logger.py",
        "protocol-before-fixed.sh",
        "hook-integration-wrapper.sh"
      ],
      "max_concurrent": 3,
      "priority": 8
    },
    "bash_specific": {
      "description": "Bash command specific validations",
      "parallel": true,
      "hooks": [
        "no-mock-code.py",
        "mcp-tool-enforcer",
        "pre-implement-context7.sh",
        "pre-commit-validator.py"
      ],
      "max_concurrent": 4,
      "priority": 2
    }
  },
  "hook_dependencies": {
    "git-validator-optimized": [],
    "pre-commit-validator.py": ["git-validator-optimized"],
    "protocol-before-fixed.sh": ["enhanced-error-logger.py"],
    "hook-integration-wrapper.sh": ["protocol-before-fixed.sh"]
  },
  "file_type_triggers": {
    "*.py": ["security-validator", "style-consistency.py", "no-mock-code.py"],
    "*.js|*.ts|*.jsx|*.tsx": ["security-validator", "style-consistency.py", "mcp-tool-enforcer"],
    "*.md": ["documentation-standards.sh"],
    "*.sh": ["pre-implement-context7.sh"],
    "package.json|requirements.txt": ["env-sync-validator"],
    "Bash": ["security-validator", "no-mock-code.py", "git-validator-optimized", "log-commands.py", "mcp-tool-enforcer", "pre-implement-context7.sh", "pre-commit-validator.py"],
    "Write": ["duplicate-detector-go", "timestamp-validator.py"],
    "Write_Edit_MultiEdit": ["security-validator", "api-endpoint-verifier.py", "style-consistency.py", "no-mock-code.py", "env-sync-validator", "mcp-tool-enforcer", "timestamp-validator.py", "documentation-standards.sh", "development-operations.sh"],
    "PostToolUse": ["enhanced-error-logger.py", "protocol-before-fixed.sh", "hook-integration-wrapper.sh"],
    "*": ["git-validator-optimized", "timestamp-validator.py"]
  }
}