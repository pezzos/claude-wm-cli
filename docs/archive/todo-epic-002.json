{
  "meta": {
    "epicId": "EPIC-002",
    "epicTitle": "Workflow State Machine",
    "epicStatus": "ðŸš§ In Progress",
    "createdDate": "2025-07-25T16:30:00+02:00",
    "description": "Implement the hierarchical workflow system (Project â†’ Epic â†’ Story â†’ Ticket) with proper state transitions and context awareness",
    "estimatedDuration": "2-3 weeks",
    "lastUpdated": "2025-07-25T16:30:00+02:00"
  },
  "userStories": [
    {
      "id": "US-005",
      "title": "Project Context Detection",
      "description": "As a user, I want the CLI to automatically detect my project state and suggest appropriate next actions",
      "priority": "high",
      "status": "completed",
      "storyPoints": 3,
      "acceptanceCriteria": [
        "CLI detects if project is initialized",
        "Workflow position is determined from state files",
        "Contextual commands are presented based on current state",
        "Dependencies between workflow steps are enforced"
      ]
    },
    {
      "id": "US-006", 
      "title": "Epic Planning Integration",
      "description": "As a user, I want to plan and manage epics through the CLI with proper state tracking",
      "priority": "high",
      "status": "todo",
      "storyPoints": 4,
      "acceptanceCriteria": [
        "CLI can create and update epics.json file",
        "Epic selection and status management implemented",
        "Story breakdown from epics is supported",
        "Progress tracking across epic lifecycle"
      ]
    },
    {
      "id": "US-007",
      "title": "Interruption Handling", 
      "description": "As a user, I want to handle urgent tasks (GitHub issues, hotfixes) without breaking my current workflow",
      "priority": "medium",
      "status": "todo",
      "storyPoints": 3,
      "acceptanceCriteria": [
        "CLI can create tickets from GitHub issues",
        "Emergency tasks integrate into current story branch",
        "Workflow state is preserved during interruptions",
        "Return to main workflow after interruption handling"
      ]
    }
  ],
  "todos": [
    {
      "id": "TASK-US005-001",
      "title": "Build project initialization detection system",
      "description": "Detect if current directory contains an initialized Claude WM project",
      "userStory": "US-005",
      "priority": "P0",
      "status": "completed",
      "estimatedHours": 2,
      "dependsOn": [],
      "blocks": ["TASK-US005-002"],
      "acceptanceCriteria": [
        "Check for existence of docs/ directory structure",
        "Validate required files (epics.json, current-epic.json)",
        "Detect partial initialization states",
        "Return clear project status (not_initialized, partial, complete)"
      ],
      "implementation": {
        "location": "internal/project/detection.go",
        "dependencies": ["os", "path/filepath"],
        "testFile": "internal/project/detection_test.go"
      }
    },
    {
      "id": "TASK-US005-002",
      "title": "Create workflow position analyzer",
      "description": "Determine current position in Project â†’ Epic â†’ Story â†’ Ticket hierarchy",
      "userStory": "US-005", 
      "priority": "P0",
      "status": "completed",
      "estimatedHours": 3,
      "dependsOn": ["TASK-US005-001"],
      "blocks": ["TASK-US005-003"],
      "acceptanceCriteria": [
        "Parse state files to determine current epic and story",
        "Identify current task or ticket in progress",
        "Detect workflow bottlenecks or blockers",
        "Calculate overall project completion percentage"
      ],
      "implementation": {
        "location": "internal/workflow/analyzer.go",
        "dependencies": ["internal/state", "encoding/json"],
        "testFile": "internal/workflow/analyzer_test.go"
      }
    },
    {
      "id": "TASK-US005-003",
      "title": "Implement contextual command generation",
      "description": "Generate available commands based on current workflow state",
      "userStory": "US-005",
      "priority": "P0",
      "status": "completed", 
      "estimatedHours": 4,
      "dependsOn": ["TASK-US005-002"],
      "blocks": ["TASK-US005-004"],
      "acceptanceCriteria": [
        "Generate commands appropriate for current workflow phase",
        "Respect dependencies between workflow steps",
        "Provide clear command descriptions and expected outcomes",
        "Handle edge cases (blocked states, missing dependencies)"
      ],
      "implementation": {
        "location": "internal/workflow/commands.go",
        "dependencies": ["internal/workflow"],
        "testFile": "internal/workflow/commands_test.go"
      }
    },
    {
      "id": "TASK-US005-004",
      "title": "Build dependency enforcement system",
      "description": "Prevent users from executing commands that violate workflow dependencies",
      "userStory": "US-005",
      "priority": "P1",
      "status": "completed",
      "estimatedHours": 3,
      "dependsOn": ["TASK-US005-003"],
      "blocks": [],
      "acceptanceCriteria": [
        "Validate command prerequisites before execution",
        "Provide clear error messages for dependency violations",
        "Suggest required steps to unblock workflow",
        "Allow override for emergency situations with warnings"
      ],
      "implementation": {
        "location": "internal/workflow/validation.go",
        "dependencies": ["internal/workflow"],
        "testFile": "internal/workflow/validation_test.go"
      }
    },
    {
      "id": "TASK-US006-001",
      "title": "Create epic management commands",
      "description": "Implement CLI commands for creating, updating, and managing epics",
      "userStory": "US-006",
      "priority": "P0",
      "status": "in_progress",
      "estimatedHours": 4,
      "dependsOn": [],
      "blocks": ["TASK-US006-002"],
      "acceptanceCriteria": [
        "epic create command with title, description, priority",
        "epic list command showing all epics with status",
        "epic update command for modifying epic properties", 
        "epic select command to make an epic current"
      ],
      "implementation": {
        "location": "cmd/claude-wm/epic.go",
        "dependencies": ["github.com/spf13/cobra", "internal/epic"],
        "testFile": "cmd/claude-wm/epic_test.go"
      }
    },
    {
      "id": "TASK-US006-002",
      "title": "Build epic state tracking system",
      "description": "Track epic progress and status changes in epics.json",
      "userStory": "US-006",
      "priority": "P0",
      "status": "todo",
      "estimatedHours": 3,
      "dependsOn": ["TASK-US006-001"],
      "blocks": ["TASK-US006-003"],
      "acceptanceCriteria": [
        "Update epic status automatically based on story completion",
        "Maintain epic progress percentage calculations",
        "Track epic start/end dates and duration",
        "Validate epic state transitions"
      ],
      "implementation": {
        "location": "internal/epic/tracker.go",
        "dependencies": ["internal/state", "time"],
        "testFile": "internal/epic/tracker_test.go"
      }
    },
    {
      "id": "TASK-US006-003",
      "title": "Implement story breakdown from epics",
      "description": "Create stories from epic definitions and manage story lifecycle",
      "userStory": "US-006",
      "priority": "P1",
      "status": "todo",
      "estimatedHours": 4,
      "dependsOn": ["TASK-US006-002"],
      "blocks": ["TASK-US006-004"],
      "acceptanceCriteria": [
        "Generate stories.json from epic user stories",
        "Create story-level tasks from story acceptance criteria",
        "Maintain story-to-epic relationships",
        "Support story priority and dependency management"
      ],
      "implementation": {
        "location": "internal/story/generator.go", 
        "dependencies": ["internal/epic", "internal/state"],
        "testFile": "internal/story/generator_test.go"
      }
    },
    {
      "id": "TASK-US006-004",
      "title": "Build epic progress tracking dashboard",
      "description": "Display epic progress with visual indicators and completion status",
      "userStory": "US-006",
      "priority": "P1",
      "status": "todo",
      "estimatedHours": 3,
      "dependsOn": ["TASK-US006-003"],
      "blocks": [],
      "acceptanceCriteria": [
        "Show epic completion percentage with progress bars",
        "Display story-level progress within epics",
        "Highlight blocked or at-risk epics",
        "Provide time estimates and burndown information"
      ],
      "implementation": {
        "location": "internal/epic/dashboard.go",
        "dependencies": ["internal/epic", "fmt"],
        "testFile": "internal/epic/dashboard_test.go"
      }
    },
    {
      "id": "TASK-US007-001",
      "title": "Create ticket system for interruptions",
      "description": "Implement ticket creation and management for urgent tasks",
      "userStory": "US-007",
      "priority": "P1",
      "status": "todo",
      "estimatedHours": 4,
      "dependsOn": [],
      "blocks": ["TASK-US007-002"],
      "acceptanceCriteria": [
        "ticket create command for manual ticket creation",
        "ticket list command showing active tickets",
        "ticket status command for ticket lifecycle management",
        "Integration with existing story workflow"
      ],
      "implementation": {
        "location": "cmd/claude-wm/ticket.go",
        "dependencies": ["github.com/spf13/cobra", "internal/ticket"],
        "testFile": "cmd/claude-wm/ticket_test.go"
      }
    },
    {
      "id": "TASK-US007-002",
      "title": "Build GitHub issue integration",
      "description": "Create tickets automatically from GitHub issues",
      "userStory": "US-007",
      "priority": "P2",
      "status": "todo",
      "estimatedHours": 5,
      "dependsOn": ["TASK-US007-001"],
      "blocks": ["TASK-US007-003"],
      "acceptanceCriteria": [
        "Fetch GitHub issues via API",
        "Convert issues to tickets with proper metadata",
        "Support issue labels, assignees, and priorities",
        "Handle authentication and rate limiting"
      ],
      "implementation": {
        "location": "internal/github/integration.go",
        "dependencies": ["github.com/google/go-github", "golang.org/x/oauth2"],
        "testFile": "internal/github/integration_test.go"
      }
    },
    {
      "id": "TASK-US007-003",
      "title": "Implement workflow state preservation",
      "description": "Save and restore workflow state during interruptions",
      "userStory": "US-007",
      "priority": "P1",
      "status": "todo",
      "estimatedHours": 3,
      "dependsOn": ["TASK-US007-002"],
      "blocks": ["TASK-US007-004"],
      "acceptanceCriteria": [
        "Save current workflow context before interruption",
        "Create interruption stack for nested interruptions",
        "Restore previous context after interruption completion",
        "Maintain state consistency during context switches"
      ],
      "implementation": {
        "location": "internal/workflow/preservation.go",
        "dependencies": ["internal/state", "internal/workflow"],
        "testFile": "internal/workflow/preservation_test.go"
      }
    },
    {
      "id": "TASK-US007-004",
      "title": "Build interruption workflow commands",
      "description": "Commands for managing interruption workflow lifecycle",
      "userStory": "US-007",
      "priority": "P1",
      "status": "todo",
      "estimatedHours": 2,
      "dependsOn": ["TASK-US007-003"],
      "blocks": [],
      "acceptanceCriteria": [
        "interrupt command to start interruption workflow",
        "resume command to return to previous workflow",
        "interrupt status command to show interruption stack",
        "Clear error handling for workflow state conflicts"
      ],
      "implementation": {
        "location": "cmd/claude-wm/interrupt.go",
        "dependencies": ["github.com/spf13/cobra", "internal/workflow"],
        "testFile": "cmd/claude-wm/interrupt_test.go"
      }
    }
  ],
  "summary": {
    "totalTasks": 12,
    "byUserStory": {
      "US-005": 4,
      "US-006": 4, 
      "US-007": 4
    },
    "byPriority": {
      "P0": 5,
      "P1": 6,
      "P2": 1
    },
    "estimatedHours": 40,
    "criticalPath": [
      "TASK-US005-001",
      "TASK-US005-002", 
      "TASK-US005-003",
      "TASK-US006-001",
      "TASK-US006-002"
    ],
    "dependencies": {
      "internal": [
        "State management system (from EPIC-001)",
        "CLI framework (from EPIC-001)",
        "Command execution engine (from EPIC-001)"
      ],
      "external": [
        "GitHub API access (for US-007)",
        "Git repository for state versioning"
      ]
    }
  },
  "completionCriteria": {
    "definition_of_done": [
      "All user stories (US-005, US-006, US-007) completed",
      "Workflow state machine fully functional",
      "Project â†’ Epic â†’ Story â†’ Ticket hierarchy implemented",
      "Context-aware command suggestions working",
      "Interruption handling preserves workflow state",
      "Comprehensive testing covering all scenarios"
    ],
    "validation": [
      "End-to-end workflow testing",
      "State transition validation",
      "Interruption scenario testing",
      "Performance testing for state operations"
    ]
  }
}